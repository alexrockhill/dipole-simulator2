# By default, for PRs CircleCI will build only examples that have changed.
# For main commits, builds are skipped entirely, as we only do full builds
# scheduled for one time daily.
#
# Tagging a commit with the following overrides these behaviors:
# - [circle front] will run the front page examples and perform test-doc
# - [circle full] will run all examples and perform test-doc
# - [circle linkcheck] will run our linkcheck job
# - [circle deploy] on a main or maint/* commit will try to immediately build
#   and deploy docs rather than waiting for the nightly build

version: 2.1

_xvfb: &xvfb
  name: Start Xvfb virtual framebuffer
  command: |
    echo "export DISPLAY=:99" >> $BASH_ENV
    /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1280x1024x24 -ac +extension GLX +render -noreset -nolisten tcp -nolisten unix

jobs:
    build_docs:
      parameters:
        scheduled:
          type: string
          default: "false"
      docker:
        # Use 18.04 rather than 20.04 because MESA 20.0.8 on 18.04 has working
        # transparency but 21.0.3 on 20.04 does not!
        - image: cimg/base:stable-18.04
      steps:
        - restore_cache:
            keys:
              - source-cache
        - checkout
        - run:
            name: Complete checkout
            command: |
              set -e
              if ! git remote -v | grep upstream; then
                git remote add upstream https://github.com/alexrockhill/dipole-simulator2.git
              fi
              git remote set-url upstream https://github.com/alexrockhill/dipole-simulator2.git
              git fetch upstream
        - save_cache:
            key: source-cache
            paths:
              - ".git"
        - run:
            name: Check-skip
            command: |
              set -e
              export COMMIT_MESSAGE=$(git log --format=oneline -n 1);
              if [[ -v CIRCLE_PULL_REQUEST ]] && ([[ "$COMMIT_MESSAGE" == *"[skip circle]"* ]] || [[ "$COMMIT_MESSAGE" == *"[circle skip]"* ]]); then
                echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
                circleci-agent step halt;
              fi

        - run:
            name: Set BASH_ENV
            command: |
              set -e
              sudo apt update -qq
              sudo apt install -qq libosmesa6 libglx-mesa0 libopengl0 libglx0 libdbus-1-3 \
                libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 \
                libxcb-render-util0 libxcb-shape0 libxcb-xfixes0 libxcb-xinerama0 \
                graphviz optipng \
                python3.8-venv python3-venv \
                xvfb libxft2 ffmpeg
              python3.8 -m venv ~/python_env
              echo "set -e" >> $BASH_ENV
              echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
              echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci" >> $BASH_ENV
              echo "export MNE_FULL_DATE=true" >> $BASH_ENV
              echo "export MNE_3D_OPTION_ANTIALIAS=false" >> $BASH_ENV
              source tools/get_minimal_commands.sh
              echo "export MNE_3D_BACKEND=pyvistaqt" >> $BASH_ENV
              echo "export MNE_BROWSER_BACKEND=qt" >> $BASH_ENV
              echo "export MNE_BROWSER_PRECOMPUTE=false" >> $BASH_ENV
              echo "export PATH=~/.local/bin/:$PATH" >> $BASH_ENV
              echo "source ~/python_env/bin/activate" >> $BASH_ENV
              mkdir -p ~/.local/bin
              ln -s ~/python_env/bin/python ~/.local/bin/python
              echo "BASH_ENV:"
              cat $BASH_ENV
              mkdir -p ~/mne_data
              touch pattern.txt

        - run:
            <<: *xvfb

        # Load pip cache
        - restore_cache:
            keys:
              - pip-cache
        - restore_cache:
            keys:
              - user-install-bin-cache

        # Hack in uninstalls of libraries as necessary if pip doesn't do the right thing in upgrading for us...
        - run:
            name: Get Python running
            command: |
              python -m pip install --upgrade "pip!=20.3.0"
              python -m pip install --progress-bar off setuptools wheel
              python -m pip install --upgrade --progress-bar off --pre sphinx
              python -m pip install --upgrade --progress-bar off -r requirements.txt

        - save_cache:
            key: pip-cache
            paths:
              - ~/.cache/pip
        - save_cache:
            key: user-install-bin-cache
            paths:
              - ~/.local/lib/python3.8/site-packages
              - ~/.local/bin

        - run:
            name: List packages
            command: python -m pip list

        # Build docs
        - run:
            name: make html
            command: |
              make flake clean doc main
        
        # Save the SG RST
        - store_artifacts:
            path: doc/auto_examples.zip
        # Save the HTML
        - store_artifacts:
            path: doc/_build/html/
            destination: dev
        - store_artifacts:
            path: doc/_build/html_stable/
            destination: stable
        - persist_to_workspace:
            root: doc/_build
            paths:
              - html
              - html_stable

        - save_cache:
            key: data-cache-sample
            paths:
              - ~/mne_data/MNE-sample-data  # (3.2 G)

    linkcheck:
      # there are a few files excluded from this for expediency, see Makefile
      parameters:
        scheduled:
          type: string
          default: "false"
      docker:
        - image: circleci/python:3.9.2-buster
      steps:
        - restore_cache:
            keys:
              - source-cache
        - checkout
        - run:
            name: Set BASH_ENV
            command: |
              set -e
              echo "set -e" >> $BASH_ENV
              echo "export PATH=~/.local/bin/:$PATH" >> $BASH_ENV
        - run:
            name: Check-skip
            command: |
              export COMMIT_MESSAGE=$(git log --format=oneline -n 1);
              if [[ "$COMMIT_MESSAGE" != *"[circle linkcheck]"* ]] && [ "<< parameters.scheduled >>" != "true" ]; then
                echo "Skip detected, exiting job ${CIRCLE_JOB}."
                circleci-agent step halt;
              fi
        - restore_cache:
            keys:
              - pip-cache
        - run:
            name: Get Python running
            command: |
              python -m pip install --upgrade "pip!=20.3.0"
              python -m pip install --progress-bar off setuptools wheel
              python -m pip install --upgrade --progress-bar off --pre sphinx
              python -m pip install --upgrade --progress-bar off -r requirements.txt
        - run:
            name: make linkcheck
            command: |
              make linkcheck
        - store_artifacts:
            path: doc/_build/linkcheck
            destination: linkcheck

  deploy:
    # will only be run on main branch
    docker:
      - image: ubuntu-2004:202111-01
    steps:
      - checkout

      - attach_workspace:
          at: doc/_build

      - run:
          name: Install and configure dependencies
          # do not update gh-pages above 3.0.0
          # see: https://github.com/tschaub/gh-pages/issues/354
          command: |
            npm install gh-pages@3.0.0
            git config --global user.email "circle@mne.com"
            git config --global user.name "Circle Ci"

      - add_ssh_keys:
          fingerprints:
            - "7f:74:00:17:2b:1a:7d:68:56:68:6b:64:b5:e0:7f:91"

      - run:
          # push built docs into the `dev` directory on the `gh-pages` branch
          name: Deploy docs to gh-pages branch
          command: node_modules/gh-pages/bin/gh-pages.js --dotfiles --message "doc updates [skip ci]" --dist doc/_build/html --dest ./dev

workflows:
  default:
    jobs:
      - build_docs:
          name: build_docs
      - linkcheck:
          name: linkcheck
      - deploy:
          name: deploy
          requires:
            - build_docs
          filters:
            branches:
              only:
                - main

  main:
    jobs:
      - build_docs:
          scheduled: "false"
          name: build_docs_main
      - deploy:
          name: deploy_main
          requires:
            - build_docs_main

  weekly:
    jobs:
      - build_docs:
          scheduled: "true"
          name: build_docs_main
      - deploy:
          name: deploy_main
          requires:
            - build_docs_main
      - linkcheck:
          name: linkcheck_weekly
          scheduled: "true"
    triggers:
      - schedule:
          # "At 00:00 on Sunday" should be often enough
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - main
